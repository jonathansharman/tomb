import Easing;
import Graphics2D;
import Graphics2DText;
import Math;
import Random;
import TwoCansAlpha4;

const X_RES = $var["screen_width"];
const Y_RES = $var["screen_height"];

const STARTING_LIFE = 10;
const LIFE_MARGIN_SIDE = 10.0;
const LIFE_MARGIN_BETWEEN = 10.0;
const LIFE_MARGIN_TOP = 10.0;

const BOARD_ROW_COUNT = 3;
const BOARD_COL_COUNT = 10;
const BOARD_LINE_WIDTH = 2.0;
const BOARD_TOP_LEFT_X = 125;
const BOARD_TOP_LEFT_Y = 200;
const BOARD_TOP_RIGHT_X = 675;
const BOARD_TOP_RIGHT_Y = 200;
const BOARD_BOTTOM_LEFT_X = 50;
const BOARD_BOTTOM_LEFT_Y = 400;
const BOARD_BOTTOM_RIGHT_X = 750;
const BOARD_BOTTOM_RIGHT_Y = 400;

const HAND_MARGIN_LEFT = 10.0;
const HAND_MARGIN_BOTTOM = 10.0;
const HAND_MARGIN_BETWEEN = 10.0;

const TURN_TRANSITION_DURATION = 20;

// Maps board coordinates to screen coordinates.
function boardRowColToXY(row, col) {
	rowT = 1.0 * row / BOARD_ROW_COUNT;
	start = lerp
		( [BOARD_TOP_LEFT_X, BOARD_TOP_LEFT_Y]
		, [BOARD_BOTTOM_LEFT_X, BOARD_BOTTOM_LEFT_Y]
		, rowT
		);
	end = lerp
		( [BOARD_TOP_RIGHT_X, BOARD_TOP_RIGHT_Y]
		, [BOARD_BOTTOM_RIGHT_X, BOARD_BOTTOM_RIGHT_Y]
		, rowT
		);
	colT = 1.0 * col / BOARD_COL_COUNT;
	return lerp(start, end, colT);
}

enum State
	{ PLAYER_TURN
	, TURN_TRANSITION
	}

class MainScene : AbstractScene {
	static field ankhImage = Images.get("images/ankh.png");

	field state = State.PLAYER_TURN;
	field turnTransitionProgress;

	field life = STARTING_LIFE;
	field board;
	field hand;
	field pass = false;

	constructor() {
		// Initialize board.
		this.board = [];
		for (row = 0; row < BOARD_ROW_COUNT; ++row) {
			this.board.add(BOARD_COL_COUNT * [null]);
		}
		// Initialize hand.
		this.hand = [];
		this.hand.add(new Card("Destroy all cobras.", () => {
			for (row = 0; row < BOARD_ROW_COUNT; ++row) {
				for (col = 0; col < BOARD_COL_COUNT; ++col) {
					monster = this.board[row][col];
					if (monster != null && monster.species == Species.COBRA) {
						this.board[row][col] = null;
					}
				}
			}
		}));
		this.hand.add(new Card("Destroy all mummies.", () => {
			for (row = 0; row < BOARD_ROW_COUNT; ++row) {
				for (col = 0; col < BOARD_COL_COUNT; ++col) {
					monster = this.board[row][col];
					if (monster != null && monster.species == Species.MUMMY) {
						this.board[row][col] = null;
					}
				}
			}
		}));
		this.hand.add(new Card("Destroy all scarabs.", () => {
			for (row = 0; row < BOARD_ROW_COUNT; ++row) {
				for (col = 0; col < BOARD_COL_COUNT; ++col) {
					monster = this.board[row][col];
					if (monster != null && monster.species == Species.SCARAB) {
						this.board[row][col] = null;
					}
				}
			}
		}));
		this.hand.add(new Card("Destroy all red monsters.", () => {
			for (row = 0; row < BOARD_ROW_COUNT; ++row) {
				for (col = 0; col < BOARD_COL_COUNT; ++col) {
					monster = this.board[row][col];
					if (monster != null && monster.color == Color.RED) {
						this.board[row][col] = null;
					}
				}
			}
		}));
		this.hand.add(new Card("Destroy all green monsters.", () => {
			for (row = 0; row < BOARD_ROW_COUNT; ++row) {
				for (col = 0; col < BOARD_COL_COUNT; ++col) {
					monster = this.board[row][col];
					if (monster != null && monster.color == Color.GREEN) {
						this.board[row][col] = null;
					}
				}
			}
		}));
		this.hand.add(new Card("Destroy all yellow monsters.", () => {
			for (row = 0; row < BOARD_ROW_COUNT; ++row) {
				for (col = 0; col < BOARD_COL_COUNT; ++col) {
					monster = this.board[row][col];
					if (monster != null && monster.color == Color.YELLOW) {
						this.board[row][col] = null;
					}
				}
			}
		}));
		this.hand.add(new Card("Last Defense. Destroy monsters in the left-most column.", () => {
			for (row = 0; row < BOARD_ROW_COUNT; ++row) {
				this.board[row][0] = null;
			}
		}));
	}

	function update(inputManager, events) {
		// Update monsters.
		for (row = 0; row < BOARD_ROW_COUNT; ++row) {
			for (col = 0; col < BOARD_COL_COUNT; ++col) {
				monster = this.board[row][col];
				if (monster != null) {
					monster.animation.update();
				}
			}
		}
		// Buffer pass turn.
		if (inputManager.isKeyPressedThisFrame(KeyboardKey.ENTER)) {
			this.pass = true;
		}
		switch (this.state) {
			case State.PLAYER_TURN:
				// Play card.
				for (i = 0; i < this.hand.length; ++i) {
					cardClicked = inputManager.didMouseClickHere
						( HAND_MARGIN_LEFT + i * (CARD_WIDTH + HAND_MARGIN_BETWEEN)
						, Y_RES - HAND_MARGIN_BOTTOM - CARD_HEIGHT
						, CARD_WIDTH
						, CARD_HEIGHT
						);
					if (cardClicked) {
						this.hand[i].effect();
						this.hand.remove(i);
						this.pass = true;
						break;
					}
				}
				// Pass turn.
				if (this.pass) {
					this.pass = false;
					this.turnTransitionProgress = 0;
					this.state = State.TURN_TRANSITION;
				}
				break;
			case State.TURN_TRANSITION:
				++this.turnTransitionProgress;
				if (this.turnTransitionProgress == TURN_TRANSITION_DURATION) {
					// Deal damage based on monsters in the first column.
					for (row = 0; row < BOARD_ROW_COUNT && this.life > 0; ++row) {
						if (this.board[row][0] != null) {
							--this.life;
						}
					}
					// Shuffle monsters to the left.
					for (row = 0; row < BOARD_ROW_COUNT; ++row) {
						for (col = 0; col < BOARD_COL_COUNT - 1; ++col) {
							this.board[row][col] = this.board[row][col + 1];
						}
					}
					// Spawn new monsters in the last column.
					for (row : this.board) {
						row[-1] = Monster.spawn();
					}
					// Switch back to player control.
					this.state = State.PLAYER_TURN;
				}
				break;
		}
	}

	function render() {
		Graphics2D.Draw.fill(128, 96, 32);

		// Draw board.
		for (row = 0; row <= BOARD_ROW_COUNT; ++row) {
			start = boardRowColToXY(row, 0);
			end = boardRowColToXY(row, BOARD_COL_COUNT);
			Graphics2D.Draw.line
				( start[0], start[1]
				, end[0], end[1]
				, BOARD_LINE_WIDTH
				, 0, 0, 0
				);
		}
		for (col = 0; col <= BOARD_COL_COUNT; ++col) {
			start = boardRowColToXY(0, col);
			end = boardRowColToXY(BOARD_ROW_COUNT, col);
			Graphics2D.Draw.line
				( start[0], start[1]
				, end[0], end[1]
				, BOARD_LINE_WIDTH
				, 0, 0, 0
				);
		}

		// Draw monsters.
		easingValue = this.state == State.TURN_TRANSITION
			? EasingFunction.LINEAR.ease(0.0, 1.0, this.turnTransitionProgress, TURN_TRANSITION_DURATION)
			: 0.0
			;
		for (row = 0; row < BOARD_ROW_COUNT; ++row) {
			for (col = 0; col < BOARD_COL_COUNT; ++col) {
				monster = this.board[row][col];
				if (monster != null) {
					pos = boardRowColToXY(row + 0.5, col + 0.5 - easingValue);
					Graphics2D.Draw.ellipse(pos[0] - 18, pos[1] - 5, 36, 10, 0, 0, 0, 128);
					monster.animation.draw(pos[0], pos[1], 0.1, 0.1);
				}
			}
		}

		// Draw life.
		if (this.life > 0) {
			// Draw the first ankh.
			MainScene.ankhImage.draw
				( LIFE_MARGIN_SIDE
				, LIFE_MARGIN_TOP
				);
			// Draw other ankhs if more than one.
			if (this.life > 1) {
				// Squish images together if there are too many.
				totalImageWidth = this.life * MainScene.ankhImage.width;
				availableWidth = X_RES - 2.0 * LIFE_MARGIN_SIDE;
				spacing = min(LIFE_MARGIN_BETWEEN, (availableWidth - totalImageWidth) / (this.life - 1));
				for (i = 1; i < this.life; ++i) {
					MainScene.ankhImage.draw
						( LIFE_MARGIN_SIDE + i * (MainScene.ankhImage.width + spacing)
						, LIFE_MARGIN_TOP
						);
				}
			}
		}

		// Draw hand.
		for (i = 0; i < this.hand.length; ++i) {
			this.hand[i].draw
				( HAND_MARGIN_LEFT + i * (CARD_WIDTH + HAND_MARGIN_BETWEEN)
				, Y_RES - HAND_MARGIN_BOTTOM - CARD_HEIGHT
				);
		}
	}
}
